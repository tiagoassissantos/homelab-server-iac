- name: Create Pi-hole namespace
  kubernetes.core.k8s:
    kubeconfig: "/home/{{ ansible_user }}/.kube/config"
    name: "{{ pihole_namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Create Pi-hole ConfigMap
  tags: pihone_configmap
  kubernetes.core.k8s:
    kubeconfig: "/home/{{ ansible_user }}/.kube/config"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: pihole-config
        namespace: "{{ pihole_namespace }}"
      data:
        DNS1: "{{ pihole_dns1 }}"
        DNS2: "{{ pihole_dns2 }}"

- name: Deploy Pi-hole
  tags: deploy_pihole
  kubernetes.core.k8s:
    kubeconfig: "/home/{{ ansible_user }}/.kube/config"
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: pihole
        namespace: "{{ pihole_namespace }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: pihole
        template:
          metadata:
            labels:
              app: pihole
          spec:
            containers:
              - name: pihole
                image: pihole/pihole:latest
                env:
                  - name: DNS1
                    valueFrom:
                      configMapKeyRef:
                        name: pihole-config
                        key: DNS1
                  - name: DNS2
                    valueFrom:
                      configMapKeyRef:
                        name: pihole-config
                        key: DNS2
                  - name: TZ
                    value: "UTC"
                ports:
                  - containerPort: 80
                    name: http
                  - containerPort: 53
                    name: dns-tcp
                    protocol: TCP
                  - containerPort: 53
                    name: dns-udp
                    protocol: UDP
                volumeMounts:
                  - name: pihole-data
                    mountPath: /etc/pihole
                  - name: dnsmasq-data
                    mountPath: /etc/dnsmasq.d
            volumes:
              - name: pihole-data
                emptyDir: {}
              - name: dnsmasq-data
                emptyDir: {}

- name: Wait for Pi-hole pod to be ready
  kubernetes.core.k8s_info:
    kubeconfig: "/home/{{ ansible_user }}/.kube/config"
    api_version: apps/v1
    kind: Deployment
    name: pihole
    namespace: "{{ pihole_namespace }}"
    wait: true
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 300

- name: Get Pi-hole pod name
  shell: kubectl -n {{ pihole_namespace }} get pod -l app=pihole -o jsonpath='{.items[0].metadata.name}'
  register: pihole_pod_name
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"

- name: Set Pi-hole password using kubectl exec
  shell: kubectl exec -n {{ pihole_namespace }} "{{ pihole_pod_name.stdout }}" -- pihole setpassword '{{ pihole_password }}'
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"

- name: Add local DNS entry for pihole.contdiscovery.lab
  shell: kubectl exec -n {{ pihole_namespace }} "{{ pihole_pod_name.stdout }}" -- sh -c 'echo "10.0.0.250 pihole.contdiscovery.lab" >> /etc/pihole/custom.list'
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"

- name: Add local DNS entry for argo.contdiscovery.lab
  shell: kubectl exec -n {{ pihole_namespace }} "{{ pihole_pod_name.stdout }}" -- sh -c 'echo "10.0.0.249 argo.contdiscovery.lab" >> /etc/pihole/custom.list'
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"

- name: Restart Pi-hole DNS service to apply custom DNS entries
  shell: kubectl exec -n {{ pihole_namespace }} "{{ pihole_pod_name.stdout }}" -- pihole reloaddns
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"

- name: Create Pi-hole Service with proper traffic policy
  tags: [pihole_service]
  kubernetes.core.k8s:
    kubeconfig: "/home/{{ ansible_user }}/.kube/config"
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: pihole-service
        namespace: "{{ pihole_namespace }}"
      spec:
        type: LoadBalancer
        loadBalancerIP: "{{ pihole_lb_ip }}"
        externalTrafficPolicy: Cluster
        ports:
          - port: 80
            targetPort: 80
            name: http
          - name: dns-tcp
            port: 53
            targetPort: 53
            protocol: TCP
          - name: dns-udp
            port: 53
            targetPort: 53
            protocol: UDP
        selector:
          app: pihole
